#დააყენე საწყისი ბალანსი და ცარიელი ტრანზაქციების სია
balance = 142                  # balance — გლობალური ცვლადი, ინახავს ანგარიშის მიმდინარე ბალანსს (საწყისი 0)
transactions = []            # transactions — სია, სადაც ინახება ყველა ჩარიცხვა და გატანა

def show_balance():          # show_balance — ფუნქცია, რომელიც ბეჭდავს მიმდინარე ბალანსს
    print("ბალანსი:", balance)  # print — ბეჭდავს ტექსტს "ბალანსი:" და balance-ის მნიშვნელობას

def deposit(amount):         # deposit — ფუნქცია თანხის ჩარიცხვისთვის, amount — ჩარიცხვის თანხა
    global balance           # global — გლობალური balance-ს გამოყენება ფუნქციის შიგნით
    if amount > 0:           # თუ ჩარიცხული თანხა დადებითია
        balance += amount    # ბალანსს ემატება amount
        transactions.append(f"+{amount}")  # სიაში ემატება ტრანზაქცია "+" ნიშნით (ჩარიცხვა)
        print(f"{amount} ჩაირიცხა")   # ბეჭდავს შეტყობინებას ჩარიცხვის შესახებ
    else:                    # თუ თანხა 0 ან უარყოფითია
        print("არასწორი თანხა")  # ბეჭდავს შეცდომის შეტყობინებას

def withdraw(amount):        # withdraw — თანხის გამოტანის ფუნქცია, amount — გამოტანის თანხა
    global balance           # გლობალური balance-ს გამოყენება
    if 0 < amount <= balance:  # თუ თანხა დადებითია და არ აღემატება ბალანსს
        balance -= amount    # ბალანსიდან იყრება amount
        transactions.append(f"-{amount}")  # სიაში ემატება ტრანზაქცია "-" ნიშნით (გატანა)
        print(f"{amount} გაიყვანეს")    # ბეჭდავს შეტყობინებას თანხის გამოტანის შესახებ
    else:                    # თუ თანხა არასწორია ან არ საკმარისია ბალანსი
        print("არასაკმარისი თანხა ან არასწორი თანხა")  # შეცდომის შეტყობინება

def show_transactions():    # show_transactions — ფუნქცია, რომელიც აჩვენებს ყველა ტრანზაქციას
    print("ტრანზაქციები:")   # ბეჭდავს სათაურს "ტრანზაქციები:"
    if transactions:        # თუ სია ცარიელი არაა
        for t in transactions:  # ციკლი სიაში ტრანზაქციების გასავლელად
            print(t)        # თითოეული ტრანზაქციის დაბეჭდვა
    else:                   # თუ სია ცარიელია
        print("ტრანზაქციები არ არის")  # შეტყობინება, რომ ტრანზაქციები არ არის

# 🧾 მენიუ — პროგრამის მთავარი ციკლი (თავიდან ბოლომდე მუშაობს, სანამ მომხმარებელი არ შეწყვეტს)
while True:
    print("\n--- მენიუ ---")  # ბეჭდავს მენიუს სათაურს
    print("1. ბალანსის ნახვა")      # მომხმარებელს აჩვენებს ოფციას 1
    print("2. ჩარიცხვა")             # ოფცია 2 — ჩარიცხვა
    print("3. გამოტანა")               # ოფცია 3 — თანხის გატანა
    print("4. ტრანზაქციების ნახვა")  # ოფცია 4 — ტრანზაქციების ისტორიის ნახვა
    print("5. გასვლა")               # ოფცია 5 — პროგრამის დასრულება

    choice = input("აირჩიე მოქმედება (1-5): ")  # მომხმარებლის არჩევანის მიღება სტრიქნული სახით

    if choice == "1":         # თუ მომხმარებელმა აირჩია 1
        show_balance()        # გამოიძახე ბალანსის ჩვენების ფუნქცია
    elif choice == "2":       # თუ აირჩია 2
        try:                  # ცდა — შემოწმება, რომ შემოსული მონაცემი სწორია
            amount = float(input("ჩასარიცხი თანხა: "))  # მიღება და ციფრად გადაყვანა
            deposit(amount)   # თანხის ჩარიცხვის ფუნქციის გამოძახება
        except ValueError:    # თუ ვერ გადააყვანა რიცხად
            print("გთხოვ, შეიყვანე რიცხვი.")  # შეცდომის შეტყობინება
    elif choice == "3":       # თუ აირჩია 3
        try:
            amount = float(input("გამოსატანი თანხა: "))  # თანხის მიღება და გადაყვანა რიცხად
            withdraw(amount)  # თანხის გამოტანის ფუნქციის გამოძახება
        except ValueError:
            print("გთხოვ, შეიყვანე რიცხვი.")  # შეცდომის შეტყობინება
    elif choice == "4":       # თუ აირჩია 4
        show_transactions()  # ტრანზაქციების სიის ჩვენება
    elif choice == "5":       # თუ აირჩია 5
        print("ნახვამდის!")   # გამოსვლის ტექსტი
        break                # ლუპიდან გამოსვლა — პროგრამის დასრულება
    else:                    # თუ მომხმარებელმა არასწორი ვარიანტი აირჩია
        print("არასწორი არჩევანი, სცადე თავიდან.")  # შეცდომის შეტყობინება

#ბალანსის ნახვა
balance = 1000                                # 👉 საწყისი ბალანსი 0 ლარია

def show_balance():                         # 👉 ფუნქცია, რომელიც აჩვენებს ბალანსს
    print(f"ბალანსი: {balance:.2f} ₾")      # 👉 ბეჭდავს ბალანსს ორ ათწილადით და ლარის ნიშნით

choice = input("აირჩიე მოქმედება 1 = ბალანსი: ")     # 👉 მომხმარებლის მიერ არჩევანის შეყვანა

if choice == "1":                           # 👉 თუ აირჩია 1 (ბალანსის ნახვა)
    show_balance()                          # 👉 გამოიძახე ფუნქცია და აჩვენე ბალანსი
else:
    print("არასწორი არჩევანი")              # 👉 სხვა შემთხვევაში, დაბეჭდოს შეცდომის ტექსტი


#ჩარიცხვა    
balance = 0                                 # 👉 საწყისი ბალანსი (0 ლარი)
transactions = []                           # 👉 ტრანზაქციების სია (ცარიელი ჯერ)

def deposit(amount):                        # 👉 ფუნქცია ჩარიცხვისთვის, იღებს თანხას
    global balance                          # 👉 გლობალური ცვლადი balance-ის გამოყენება
    if amount > 0:                          # 👉 თუ ჩასარიცხი თანხა მეტია ნულზე
        balance += amount                   # 👉 ბალანსს დაემატოს ეს თანხა
        transactions.append(f"+{amount}")   # 👉 ტრანზაქცია დაემატოს სიაში "+" ნიშნით
        print(f"{amount} ₾ ჩაირიცხა")       # 👉 დაბეჭდოს შეტყობინება ჩარიცხვის შესახებ
    else:
        print("არასწორი თანხა")             # 👉 თუ რიცხვი <= 0ა, შეცდომის შეტყობინება

choice = input("აირჩიე მოქმედება 2 = ჩარიცხვა: ")  # 👉 მომხმარებელი ირჩევს მოქმედებას

if choice == "2":                                   # 👉 თუ აირჩია 2
    try:
        amount = float(input("ჩასარიცხი თანხა: "))  # 👉 მომხმარებელი შეყავს თანხა რიცხვით
        deposit(amount)                             # 👉 ჩარიცხვის ფუნქციის გამოძახება
    except ValueError:
        print("გთხოვ, შეიყვანე რიცხვი.")            # 👉 თუ არ შეიყვანს რიცხვს, გამოჩნდება შეცდომა
else:
    print("არასწორი არჩევანი")                      # 👉 სხვა შემთხვევებში დაიბეჭდება შეცდომა



#გამოტანა
balance = 100                                # 👉 საწყისი ბალანსი არის 100 ლარი
transactions = []                            # 👉 ტრანზაქციების სია

def withdraw(amount):                        # 👉 ფუნქცია თანხის გატანისთვის
    global balance                           # 👉 ვიყენებთ გლობალურ ბალანსს
    if 0 < amount <= balance:                # 👉 თუ თანხა მეტია 0-ზე და ნაკლებია ან ტოლი ბალანსზე
        balance -= amount                    # 👉 ბალანსიდან გამოაკლოს თანხა
        transactions.append(f"-{amount}")    # 👉 დაამატოს ტრანზაქციების სიაში მინუსით
        print(f"{amount} ₾ გაიტანე")          # 👉 დაბეჭდოს შეტყობინება გატანაზე
    else:
        print("არასაკმარისი თანხა ან არასწორი თანხა")  # 👉 შეცდომის შეტყობინება

choice = input("აირჩიე მოქმედება 3 = გამოტანა: ")       # 👉 ეკითხება მხოლოდ 3 გატანაზე

if choice == "3":                                        # 👉 თუ მომხმარებელმა აირჩია 3
    try:
        amount = float(input("გამოსატანი თანხა: "))     # 👉 შეყვანა გამოსატანი თანხის
        withdraw(amount)                                 # 👉 გამოიძახე გატანის ფუნქცია
    except ValueError:
        print("გთხოვ, შეიყვანე რიცხვი.")                # 👉 თუ არ შეიყვანს სწორად, გამოაჩინე შეცდომა
else:
    print("არასწორი არჩევანი")                          # 👉 თუ არ შეიყვანს 3-ს, აჩვენე შეცდომა 